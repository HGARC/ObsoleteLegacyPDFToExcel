package com.apache.test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
public class WriteToExcel {

//	private static final String FILE_NAME = "/Users/Abde/Desktop/Java/MyFirstExcel.xlsx";

	public static void main(String[] args) {
		
			
			File folder = new File("F:\\Hgrac\\PdfToExcell\\HGARC_FADI_MergedFindingAids");//pass your local pc address here
	    	
	    	if(folder.isDirectory()) {
	    		File list[] = folder.listFiles();
	    		for(int i=0;i<list.length;i++) {
	    			doNext(list[i].getAbsolutePath());
	    		}
	    	}else {
	    		System.out.println("Plese select folder first");
	    	}
			
	}

	private static void doNext(String absolutePath) {
		PdfReader reader;
		try {
		reader = new PdfReader(absolutePath);

		// pageNumber = 1
		StringBuffer textFromPage1 = new StringBuffer();
		String text1 =  PdfTextExtractor.getTextFromPage(reader, 1);
		textFromPage1.append(text1);
		String page1String  = textFromPage1.toString();
		String colCode = "";
		for (String string : page1String.split(" ")) {
			if(string.contains("#")) {
				colCode = string.replace("#", "");
			}
		}
		String[] nameArr = page1String.split("#");
		String name = nameArr[0].replaceAll(",", " ").replace("[", "").replace("]", "");
		String colName = name.
				replace("Collection", "").replace("The Inventory \n" + 
						"of the ", "");

		//Rest Pages
		StringBuffer textFromPage = new StringBuffer();
		int noOfPages = reader.getNumberOfPages();
		for (int i = 2; i <=noOfPages; i++) {
			String text =  PdfTextExtractor.getTextFromPage(reader, i);
			textFromPage.append(text);
		}
		List<Book> bookDataList =  new ArrayList<>();
		
		//System.out.println(textFromPage.toString());
		String finalString  = textFromPage.toString().replace("Box", "").replace(colCode, "").replace(" ", "  ")
				.replace(colName, "").replace(",", " ").replace(".", " ").replace("I ", "I-")
				.replace("V ", "I-").replace("A ", "A  ").replace("B  ", "B ").replace("C  ", "C ");
		//System.out.println(finalString);
		
			String[] split = finalString.split("I-");
			
		//System.out.println(Arrays.toString(split));
			for (String string : split) {
				if(string.contains("A ")) {
					String series = string.substring(0,string.indexOf("A "));
				//System.out.println(series);
				

					String output = "";

					for(char alphabet = 'A'; alphabet <='Z'; alphabet++ )
				    {
						if(string.contains(String.valueOf(alphabet)+" ")) {
							String subSeries = string.substring(string.indexOf(String.valueOf(alphabet)+" "));
							System.out.println(subSeries);
							Book b = new Book();
							b.setCollectionCode(colCode);
							b.setCollectionName(colName);
							b.setSeries(series);
							b.setSubSeries(subSeries);
							bookDataList.add(b);
						} 
						 
				    }
					
					
					
				}
			}
		//	System.out.println(Arrays.toString(split)+System.lineSeparator());
			
		
		

		

	//	System.out.println("---------------------------------------------------------");

		//System.out.println(s);

		reader.close();
		String[] columns = {"Collection Name", "Accession Date", "Collection Code","Series","Subseries",
				"Sub-Subseries","Medium","Form","Heading","Begin Date","End Date",
				"Date Expression","Description"};




		// Create a Workbook
		Workbook workbook = new XSSFWorkbook(); // new HSSFWorkbook() for generating `.xls` file

		/* CreationHelper helps us create instances of various things like DataFormat, 
           Hyperlink, RichTextString etc, in a format (HSSF, XSSF) independent way */
		CreationHelper createHelper = workbook.getCreationHelper();

		// Create a Sheet
		Sheet sheet = workbook.createSheet("PDFExtract");

		// Create a Font for styling header cells
		Font headerFont = workbook.createFont();
		headerFont.setBold(true);
		headerFont.setFontHeightInPoints((short) 14);
		headerFont.setColor(IndexedColors.RED.getIndex());

		// Create a CellStyle with the font
		CellStyle headerCellStyle = workbook.createCellStyle();
		headerCellStyle.setFont(headerFont);

		// Create a Row
		Row headerRow = sheet.createRow(0);

		// Create cells
		for(int i = 0; i < columns.length; i++) {
			Cell cell = headerRow.createCell(i);
			cell.setCellValue(columns[i]);
			cell.setCellStyle(headerCellStyle);
		}

		// Create Cell Style for formatting Date
		CellStyle dateCellStyle = workbook.createCellStyle();
		dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("dd-MM-yyyy"));

		// Create Other rows and cells with books data
		int rowNum = 1;
		for(Book book: bookDataList) {
			Row row = sheet.createRow(rowNum++);

			row.createCell(0)
			.setCellValue(book.getCollectionName());
			Cell dateOfBirthCell = row.createCell(1);
			dateOfBirthCell.setCellValue(book.getAccessionDate());
			dateOfBirthCell.setCellStyle(dateCellStyle);
			row.createCell(2)
			.setCellValue(book.getCollectionCode());
			row.createCell(3)
			.setCellValue(book.getSeries());
			row.createCell(4)
			.setCellValue(book.getSubSeries());
		}

		// Resize all columns to fit the content size
		for(int i = 0; i < columns.length; i++) {
			sheet.autoSizeColumn(i);
		}
		
		File file = new File (absolutePath);
		File folder =  new File(file.getParentFile().getParent()+ "//"+ file.getParentFile().getName()+"_Output");
		folder.mkdirs();

		FileOutputStream outputStream = new FileOutputStream(absolutePath.substring(0,absolutePath.indexOf(".")) + "xlsx");
		workbook.write(outputStream);
		workbook.close();
	} catch (FileNotFoundException e) {
		e.printStackTrace();
	} catch (IOException e) {
		e.printStackTrace();
	}
	catch (Exception e) {
		e.printStackTrace();
	}

	// System.out.println("Done");
      		
	}


}
